{
  "for loop": {
    "prefix": "for",
    "body": [
      "for (int ${1:i} = 0; ${1:i} < ${2:length}; ++${1:i})",
      "{",
      "\t$0",
      "}",
    ],
  },
  "Reverse for loop": {
    "prefix": "forr",
    "body": [
      "for (int ${2:length} - 1; ${1:i} >= 0; --${1:i})",
      "{",
      "\t$0",
      "}",
    ],
  },

  "Unity C# Empty File Setup": {
    "isFileTemplate": true,
    "prefix": "unityempty",
    "body": [
      "#nullable enable",
      "using System;",
      "using System.Collections;",
      "using System.Collections.Generic;",
      "using UnityEngine;",
      "",
      "namespace ${1:${TM_DIRECTORY/^.*[\\\\\\\/]//}}",
      "{",
      "\t$0",
      "}",
    ],
  },
  "Unity C# Class File Setup": {
    "isFileTemplate": true,
    "prefix": "unityclass",
    "body": [
      "#nullable enable",
      "using System;",
      "using System.Collections;",
      "using System.Collections.Generic;",
      "using UnityEngine;",
      "",
      "namespace ${1:${TM_DIRECTORY/^.*[\\\\\\\/]//}}",
      "{",
      "\tpublic class ${2:${TM_FILENAME_BASE/^(\\w)/${1:/upcase}/}}",
      "\t{",
      "\t\t$0",
      "\t}",
      "}",
    ],
  },
  "Unity C# Struct File Setup": {
    "isFileTemplate": true,
    "prefix": "unitystruct",
    "body": [
      "#nullable enable",
      "using System;",
      "using System.Collections;",
      "using System.Collections.Generic;",
      "using UnityEngine;",
      "",
      "namespace ${1:${TM_DIRECTORY/^.*[\\\\\\\/]//}}",
      "{",
      "\tpublic struct ${2:${TM_FILENAME_BASE/^(\\w)/${1:/upcase}/}}",
      "\t{",
      "\t\t$0",
      "\t}",
      "}",
    ],
  },
  "Unity C# Interface File Setup": {
    "isFileTemplate": true,
    "prefix": "unityinterface",
    "body": [
      "#nullable enable",
      "using System;",
      "using System.Collections;",
      "using System.Collections.Generic;",
      "using UnityEngine;",
      "",
      "namespace ${1:${TM_DIRECTORY/^.*[\\\\\\\/]//}}",
      "{",
      "\tpublic interface ${2:${TM_FILENAME_BASE/^(\\w)/${1:/upcase}/}}",
      "\t{",
      "\t\t$0",
      "\t}",
      "}",
    ],
  },
  "Unity C# MonoBehaviour File Setup": {
    "isFileTemplate": true,
    "prefix": "unitymono",
    "body": [
      "#nullable enable",
      "using System;",
      "using System.Collections;",
      "using System.Collections.Generic;",
      "using UnityEngine;",
      "",
      "namespace ${1:${TM_DIRECTORY/^.*[\\\\\\\/]//}}",
      "{",
      "\tpublic class ${2:${TM_FILENAME_BASE/^(\\w)/${1:/upcase}/}} : MonoBehaviour",
      "\t{",
      "\t\t${0:public int value { get => _value; set => _value = value; \\}\n\n        [SerializeField]\n        private int _value;}",
      "",
      "\t\tprotected void OnEnable()",
      "\t\t{",
      "\t\t\t",
      "\t\t}",
      "",
      "\t\tprotected void OnDisable()",
      "\t\t{",
      "\t\t\t",
      "\t\t}",
      "",
      "\t\tprotected void Update()",
      "\t\t{",
      "\t\t\t",
      "\t\t}",
      "\t}",
      "}",
    ],
  },
  "Unity C# Visual Scripting Node File Setup": {
    "isFileTemplate": true,
    "prefix": "unitynode",
    "body": [
      "#nullable enable",
      "using System;",
      "using System.Collections;",
      "using System.Collections.Generic;",
      "using UnityEngine;",
      "using Unity.VisualScripting;",
      "",
      "namespace ${1:${TM_DIRECTORY/^.*[\\\\\\\/]//}}",
      "{",
      "\tpublic class ${2:${TM_FILENAME_BASE/^(\\w)/${1:/upcase}/}} : Unit",
      "\t{",
      "\t\t${0:[DoNotSerialize]\n        public ControlInput? inputTrigger;\n\n        [DoNotSerialize]\n        public ControlOutput? outputTrigger;\n\n        [DoNotSerialize]\n        public ValueInput? myValueA;\n\n        [DoNotSerialize]\n        public ValueInput? myValueB;\n\n        [DoNotSerialize]\n        public ValueOutput? result;\n\n        private string? _resultValue;}",
      "",
      "\t\tprotected override void Definition()",
      "\t\t{",
      "\t\t\t${0:inputTrigger = ControlInput(\"inputTrigger\", (flow) =>\n            {\n                _resultValue = flow.GetValue<string>(myValueA) + flow.GetValue<string>(myValueB) + \"!!!\";\n                return outputTrigger;\n            });\n            outputTrigger = ControlOutput(\"outputTrigger\");\n\n            myValueA = ValueInput<string>(\"myValueA\", \"Hello \");\n            myValueB = ValueInput<string>(\"myValueB\", String.Empty);\n            result = ValueOutput<string>(\"result\", (flow) => resultValue);}",
      "\t\t}",
      "\t}",
      "}",
    ],
  },
}