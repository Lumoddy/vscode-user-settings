{
  "Export with JSDoc": {
    "prefix": "export",
    "body": [
      "/**",
      "*/ export$0",
    ],
  },
  "Import": {
    "prefix": "import",
    "body": "import { ${0:${CLIPBOARD/[^\\0]*?import\\s*\\(\\s*\"([^\\0]*?)\"\\s*\\)\\s*(?:\\.\\s*(\\w+))?[^\\0]*|[^\\0]*?import\\s*(?:\u007B\\s*([^\\0]*?)\\s*\u007D|\\*\\s*as\\s+\\w+)\\s*from\\s*\"([^\\0]*?)\"[^\\0]*|[^\\0]*/$2$3/}} } from \"${1:${CLIPBOARD/[^\\0]*?import\\s*\\(\\s*\"([^\\0]*?)\"\\s*\\)\\s*(?:\\.\\s*(\\w+))?[^\\0]*|[^\\0]*?import\\s*(?:\u007B\\s*([^\\0]*?)\\s*\u007D|\\*\\s*as\\s+\\w+)\\s*from\\s*\"([^\\0]*?)\"[^\\0]*|[^\\0]*/$1$4/}}\";",
    "description": "If an import statement has been copied, the contents of it will be pasted with this snippet.",
  },
  "Import with JSDoc": {
    "prefix": "import",
    "body": [
      "/**",
      "@import { ${0:${CLIPBOARD/[^\\0]*?import\\s*\\(\\s*\"([^\\0]*?)\"\\s*\\)\\s*(?:\\.\\s*(\\w+))?[^\\0]*|[^\\0]*?import\\s*(?:\u007B\\s*([^\\0]*?)\\s*\u007D|\\*\\s*as\\s+\\w+)\\s*from\\s*\"([^\\0]*?)\"[^\\0]*|[^\\0]*/$2$3/}} } from \"${1:${CLIPBOARD/[^\\0]*?import\\s*\\(\\s*\"([^\\0]*?)\"\\s*\\)\\s*(?:\\.\\s*(\\w+))?[^\\0]*|[^\\0]*?import\\s*(?:\u007B\\s*([^\\0]*?)\\s*\u007D|\\*\\s*as\\s+\\w+)\\s*from\\s*\"([^\\0]*?)\"[^\\0]*|[^\\0]*/$1$4/}}\"",
      "*/",
    ],
    "description": "If an import statement has been copied, the contents of it will be pasted with this snippet.",
  },

  "Public access JSDoc": {
    "prefix": "public",
    "body": [
      "/**",
      "@public*/$0",
    ],
  },
  "Protected access JSDoc": {
    "prefix": "protected",
    "body": [
      "/**",
      "@protected*/$0",
    ],
  },
  "Private access JSDoc": {
    "prefix": "private",
    "body": [
      "/**",
      "@private*/$0",
    ],
  },
  "Public override JSDoc": {
    "prefix": "override",
    "body": [
      "/**",
      "@public @override*/$0",
    ],
  },
  "Public static JSDoc": {
    "prefix": "static",
    "body": [
      "/**",
      "@public*/ static$0",
    ],
  },
  "Param JSDoc": {
    "prefix": "param",
    "body": [
      "/**",
      "@param {${1:*}} ${2:${TM_CURRENT_LINE/[^\\0]*?\\w+\\s*\\(\\s*(\\w+)[^\\0]*|[^\\0]*/$1/}}",
      "*/$0",
    ],
  },
  "Returns JSDoc": {
    "prefix": "returns",
    "body": [
      "/**",
      "@returns {${1:*}}",
      "*/$0",
    ],
  },
  "Public constructor with JSDoc": {
    "prefix": "constructor",
    "body": [
      "/**",
      "@public*/ constructor($1)",
      "{",
      "\t$0",
      "}",
    ],
  },
  "Field definition with JSDoc": {
    "prefix": ["field", "thisvalue", "type"],
    "body": [
      "/**",
      "@type {$2}",
      "@private*/ this.${1:_value} = $0",
    ],
  },
  "Public get with JSDoc": {
    "prefix": "get",
    "body": [
      "/**",
      "@returns {$2}",
      "@public @readonly*/ get ${1:value}() { return $0 }",
    ],
  },
  "Public set with JSDoc": {
    "prefix": "set",
    "body": [
      "/**",
      "@public*/ set ${1:value}(value) { $0 }",
    ],
  },
  "Public get/set with JSDoc": {
    "prefix": "getset",
    "body": [
      "/**",
      "@returns {$2}",
      "@public*/ get ${1:value}()",
      "{",
      "\t$0",
      "}",
      "/**",
      "@public*/ set ${1:value}(value)",
      "{",
      "\t",
      "}",
    ],
  },
  "Public inline get/set JSDoc": {
    "prefix": "getsetreturn",
    "body": [
      "/**",
      "@returns {$2}",
      "@public*/ get ${1:value}() { return this._${1:value} }",
      "/**",
      "@public*/ set ${1:value}(value) { this._${1:value} = value$0 }",
    ],
  },
  "Class with JSDoc": {
    "prefix": "class",
    "body": [
      "/**",
      "*/ class ${1:_Class}",
      "{",
      "\t$0",
      "}",
    ],
  },
  "Function with JSDoc": {
    "prefix": "function",
    "body": [
      "/**",
      "*/ function ${1:_function}(${2})",
      "{",
      "\t$0",
      "}",
    ],
  },
  "Enum with JSDoc": {
    "prefix": "enum",
    "body": [
      "/**",
      "@enum {typeof ${1:Enum}[keyof typeof ${1:Enum}]}",
      "*/ const ${1:Enum} = Object.freeze(",
      "{",
      "\t${0:value: 0,}",
      "});",
    ],
  },

  "Cast JSDoc": {
    "prefix": "casttype",
    "body": [
      "/** @type {$1} */($0)",
    ],
  },
  "Cast Const JSDoc": {
    "prefix": "castconst",
    "body": [
      "/** @type {const} */($0)",
    ],
  },
  "Satisfies JSDoc": {
    "prefix": "satisfies",
    "body": [
      "/** @satisfies {$1} */($0)",
    ],
  },
  "Satisfies Const JSDoc": {
    "prefix": "satisfiesconst",
    "body": [
      "/** @satisfies {$1} @type {const} */($0)",
    ],
  },
  "Typed Const JSDoc": {
    "prefix": "typeconst",
    "body": [
      "/**",
      "@type {$1}",
      "*/ const $0",
    ],
  },
  "Typed Variable JSDoc": {
    "prefix": "typelet",
    "body": [
      "/**",
      "@type {$1}",
      "*/ let $0",
    ],
  },
  "Type Definition JSDoc": {
    "prefix": "typedef",
    "body": [
      "/**",
      "@typedef {$0} ${1:Type}",
      "*/",
    ],
  },

  "If Statement": {
    "prefix": "if",
    "body": [
      "if ($1)",
      "{",
      "\t$0",
      "}",
    ],
  },
  "Switch Statement": {
    "prefix": "switch",
    "body": [
      "switch ($1)",
      "{",
      "\tcase $0:",
      "\t\tbreak;",
      "\tdefault:",
      "\t\tbreak;",
      "}",
    ],
  },
  "While Loop": {
    "prefix": "while",
    "body": [
      "while ($1)",
      "{",
      "\t$0",
      "}",
    ],
  },
  "Do-While Loop": {
    "prefix": "dowhile",
    "body": [
      "do",
      "{",
      "\t$0",
      "}",
      "while ($1);",
    ],
  },
  "For-Of Loop": {
    "prefix": ["foreach", "forof"],
    "body": [
      "for (const ${1:element} of ${2:array})",
      "{",
      "\t$0",
      "}",
    ],
  },
  "For-In Loop": {
    "prefix": "forin",
    "body": [
      "for (const ${1:key} in ${2:object})",
      "{",
      "\t$0",
      "}",
    ],
  },
  "For Loop": {
    "prefix": "for",
    "body": [
      "for (let ${1:i} = 0; ${1:i} < ${2:length}; ++${1:i})",
      "{",
      "\t$0",
      "}",
    ],
  },
  "For-Await Loop": {
    "prefix": "forawait",
    "body": [
      "for await (const ${1:element} in ${2:object})",
      "{",
      "\t$0",
      "}",
    ],
  },
  "Throw Error": {
    "prefix": "throw",
    "body": "throw new ${1|Error,TypeError,SyntaxError,RangeError,ReferenceError|}(\"$0\");",
  },

  "Custom HTMLElement": {
    "prefix": [ "classHTMLElement", "customElement" ],
    "body": [
      "/**",
      "*/ export class ${1:CustomClass} extends HTMLElement",
      "{",
      "\t/**",
      "\t@protected @readonly*/ static observedAttributes = /** @type {const} */([]);",
      "",
      "\t/**",
      "\t@public*/ constructor()",
      "\t{",
      "\t\tsuper();$0",
      "\t}",
      "",
      "\t/**",
      "\t@protected*/ connectedCallback()",
      "\t{",
      "\t\t",
      "\t}",
      "",
      "\t/**",
      "\t@protected*/ disconnectedCallback()",
      "\t{",
      "\t\t",
      "\t}",
      "",
      "\t/**",
      "\t@param {typeof ${1:CustomClass}[\"observedAttributes\"][number]} attributeName",
      "\t@param {string | null} oldValue",
      "\t@param {string | null} newValue",
      "\t@protected*/ attributeChangedCallback(attributeName, oldValue, newValue)",
      "\t{",
      "\t\t",
      "\t}",
      "}",
      "customElements.define(\"${2:custom-element}\", ${1:CustomClass});",
    ],
  },
  "Event Listener Pattern": {
    "prefix": "listeners",
    "body": [
      "/**",
      "@export @typedef {{",
      "\t\"${0:type}\": [...parameters: any[]],",
      "}} ${1:EventMap}",
      "*/",
      "",
      "const _listeners = /** @type {{ [K in keyof ${1:EventMap}]?: ((...args: ${1:EventMap}[K]) => void)[] }} */({});",
      "",
      "/**",
      "@template {keyof ${1:EventMap}} const K",
      "@param {K} type",
      "@param {(this: unknown, ...args: ${1:EventMap}[K]) => void} listener",
      "*/ export function add${2:Event}Listener(type, listener)",
      "{",
      "\tconst listenerList = _listeners[type];",
      "\tif (listenerList === undefined) // @ts-ignore",
      "\t\t_listeners[type] = [listener];",
      "\telse",
      "\t\tlistenerList.push(listener);",
      "}",
      "",
      "/**",
      "@template {keyof ${1:EventMap}} const K",
      "@param {K} type",
      "@param {(this: unknown, ...args: ${1:EventMap}[K]) => void} listener",
      "*/ export function remove${2:Event}Listener(type, listener)",
      "{",
      "\tconst listenerList = _listeners[type];",
      "\tif (listenerList === undefined)",
      "\t\treturn;",
      "",
      "\tconst index = listenerList.indexOf(listener);",
      "\tif (index !== -1)",
      "\t\tlistenerList.splice(index, 1);",
      "}",
      "",
      "/**",
      "@template {keyof ${1:EventMap}} const K",
      "@param {K} type",
      "@param {${1:EventMap}[K]} parameters",
      "*/ export function dispatch${2:Event}(type, ...parameters)",
      "{",
      "\tconst listenerList = _listeners[type];",
      "\tif (listenerList === undefined)",
      "\t\treturn;",
      "",
      "\tfor (const listener of listenerList)",
      "\t\tlistener(...parameters);",
      "}",
    ],
  },

  "Console Log Line": {
    "prefix": "debug",
    "body": "\nconsole.log(`${TM_CURRENT_LINE/(?:\\w|(?<=\\w)\\.(?!\\.)(?=\\w))+(?![\\w.]*\\s*\\()(?<!(?=return(?!\\w)|this(?![\\w.])|let(?![\\w.])|var(?![\\w.])|const(?![\\w.])|super(?![\\w.])|if(?!\\w)|else(?!\\w)|for(?!\\w)|switch(?!\\w)|case(?!\\w)|function(?!\\w))[\\w.]*)(?!d?e?b?u?g?$)/$\u007B$0\u007D/gm}`);",
  }
}